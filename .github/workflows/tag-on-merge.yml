name: Tag on Merge of Prepare PR

on:
  workflow_call:
    inputs:
      target_branch:
        description: 'Target branch to monitor for merges (default: master)'
        required: false
        type: string
        default: 'master'
      repository:
        description: 'Target repository (default: calling repo)'
        required: false
        type: string
      commit_message:
        description: 'The commit message to check'
        required: true
        type: string
      create_release_workflow_path:
        description: 'Path to the create-release workflow in the calling repo'
        required: false
        type: string
        default: './.github/workflows/create-release.yml'
    outputs:
      version:
        description: 'Extracted version from commit message'
        value: ${{ jobs.tag-on-merge.outputs.version }}
    secrets:
      repo_token:
        description: 'GitHub token with repo permissions'
        required: true

permissions:
  contents: write

jobs:
  tag-on-merge:
    if: |
      contains(inputs.commit_message, 'chore: update CHANGELOG for ') || startsWith(inputs.commit_message, 'chore: prepare v')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository || github.repository }}
          token: ${{ secrets.repo_token }}
          fetch-depth: 0

      - name: Extract version from commit message
        id: extract-version
        run: |
          COMMIT_MSG="${{ inputs.commit_message }}"
          echo "Processing commit message: $COMMIT_MSG"
          
          if [[ "$COMMIT_MSG" =~ chore:\ prepare\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="v${BASH_REMATCH[1]}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Extracted version: $VERSION"
          elif [[ "$COMMIT_MSG" =~ chore:\ update\ CHANGELOG\ for\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="v${BASH_REMATCH[1]}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Extracted version from CHANGELOG: $VERSION"
          else
            echo "No valid prepare commit found in message: $COMMIT_MSG"
            exit 1
          fi

      - name: Check if tag already exists
        id: check-tag
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists, skipping tag creation"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag $VERSION does not exist, proceeding with creation"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git Tag
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          VERSION="${{ steps.extract-version.outputs.version }}"
          git tag "$VERSION"
          git push origin "$VERSION"
          echo "Created and pushed tag: $VERSION"